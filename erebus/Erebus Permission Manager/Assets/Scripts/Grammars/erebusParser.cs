//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Scripts/Grammar/erebus.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class erebusParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, WS=6, COMMENT=7, SEMI=8, PLUS=9, 
		MINUS=10, MULT=11, DIV=12, EQUAL=13, ASSIGN=14, NOTEQUAL=15, GT=16, LT=17, 
		GTEQ=18, LTEQ=19, AND=20, OR=21, NOT=22, CONTAINS=23, LPAREN=24, RPAREN=25, 
		LBRACKET=26, RBRACKET=27, BLOCK_OPEN=28, BLOCK_CLOSE=29, TRUE=30, FALSE=31, 
		POLICY=32, NUMBER=33, ID=34, STRING=35;
	public const int
		RULE_compilationUnit = 0, RULE_statement = 1, RULE_function = 2, RULE_bodystmt = 3, 
		RULE_printstmt = 4, RULE_assignstmt = 5, RULE_ifstmt = 6, RULE_action = 7, 
		RULE_conditionExpr = 8, RULE_logicalExpr = 9, RULE_comparisonExpr = 10, 
		RULE_cmpOperand = 11, RULE_logicalEntity = 12, RULE_opExpression = 13, 
		RULE_cmpOp = 14, RULE_logicOp = 15, RULE_numericTerm = 16, RULE_funcname = 17, 
		RULE_value = 18, RULE_api = 19, RULE_list = 20, RULE_array = 21;
	public static readonly string[] ruleNames = {
		"compilationUnit", "statement", "function", "bodystmt", "printstmt", "assignstmt", 
		"ifstmt", "action", "conditionExpr", "logicalExpr", "comparisonExpr", 
		"cmpOperand", "logicalEntity", "opExpression", "cmpOp", "logicOp", "numericTerm", 
		"funcname", "value", "api", "list", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'function'", "','", "'console.log('", "'let'", "'if'", null, null, 
		"';'", "'+'", "'-'", "'*'", "'/'", "'=='", "'='", "'!='", "'>'", "'<'", 
		"'>='", "'<='", "'&&'", "'||'", "'!'", null, "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "WS", "COMMENT", "SEMI", "PLUS", "MINUS", 
		"MULT", "DIV", "EQUAL", "ASSIGN", "NOTEQUAL", "GT", "LT", "GTEQ", "LTEQ", 
		"AND", "OR", "NOT", "CONTAINS", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
		"BLOCK_OPEN", "BLOCK_CLOSE", "TRUE", "FALSE", "POLICY", "NUMBER", "ID", 
		"STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "erebus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static erebusParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public erebusParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public erebusParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(erebusParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 44;
				statement();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(erebusParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(erebusParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_OPEN() { return GetToken(erebusParser.BLOCK_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_CLOSE() { return GetToken(erebusParser.BLOCK_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(erebusParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(erebusParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodystmtContext[] bodystmt() {
			return GetRuleContexts<BodystmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodystmtContext bodystmt(int i) {
			return GetRuleContext<BodystmtContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(T__0);
			State = 55;
			funcname();
			State = 56;
			Match(LPAREN);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 57;
				Match(ID);
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 58;
					Match(T__1);
					State = 59;
					Match(ID);
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 67;
			Match(RPAREN);
			State = 68;
			Match(BLOCK_OPEN);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << POLICY))) != 0)) {
				{
				{
				State = 69;
				bodystmt();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75;
			Match(BLOCK_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfstmtContext ifstmt() {
			return GetRuleContext<IfstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintstmtContext printstmt() {
			return GetRuleContext<PrintstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignstmtContext assignstmt() {
			return GetRuleContext<AssignstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public BodystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bodystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterBodystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitBodystmt(this);
		}
	}

	[RuleVersion(0)]
	public BodystmtContext bodystmt() {
		BodystmtContext _localctx = new BodystmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_bodystmt);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77;
				ifstmt();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				printstmt();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79;
				assignstmt();
				}
				break;
			case POLICY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 80;
				action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(erebusParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(erebusParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PrintstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterPrintstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitPrintstmt(this);
		}
	}

	[RuleVersion(0)]
	public PrintstmtContext printstmt() {
		PrintstmtContext _localctx = new PrintstmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_printstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(T__2);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACKET) | (1L << NUMBER) | (1L << ID) | (1L << STRING))) != 0)) {
				{
				State = 84;
				value();
				}
			}

			State = 87;
			Match(RPAREN);
			State = 88;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(erebusParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(erebusParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(erebusParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ApiContext api() {
			return GetRuleContext<ApiContext>(0);
		}
		public AssignstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterAssignstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitAssignstmt(this);
		}
	}

	[RuleVersion(0)]
	public AssignstmtContext assignstmt() {
		AssignstmtContext _localctx = new AssignstmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(T__3);
			State = 91;
			Match(ID);
			State = 92;
			Match(ASSIGN);
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 93;
				value();
				}
				break;
			case 2:
				{
				State = 94;
				api();
				}
				break;
			}
			State = 97;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(erebusParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionExprContext conditionExpr() {
			return GetRuleContext<ConditionExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(erebusParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_OPEN() { return GetToken(erebusParser.BLOCK_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodystmtContext bodystmt() {
			return GetRuleContext<BodystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_CLOSE() { return GetToken(erebusParser.BLOCK_CLOSE, 0); }
		public IfstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterIfstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitIfstmt(this);
		}
	}

	[RuleVersion(0)]
	public IfstmtContext ifstmt() {
		IfstmtContext _localctx = new IfstmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(T__4);
			State = 100;
			Match(LPAREN);
			State = 101;
			conditionExpr();
			State = 102;
			Match(RPAREN);
			State = 103;
			Match(BLOCK_OPEN);
			State = 104;
			bodystmt();
			State = 105;
			Match(BLOCK_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(erebusParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(erebusParser.SEMI, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 14, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(POLICY);
			State = 108;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExprContext logicalExpr() {
			return GetRuleContext<LogicalExprContext>(0);
		}
		public ConditionExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterConditionExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitConditionExpr(this);
		}
	}

	[RuleVersion(0)]
	public ConditionExprContext conditionExpr() {
		ConditionExprContext _localctx = new ConditionExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_conditionExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			logicalExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(erebusParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExprContext[] logicalExpr() {
			return GetRuleContexts<LogicalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExprContext logicalExpr(int i) {
			return GetRuleContext<LogicalExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExprContext comparisonExpr() {
			return GetRuleContext<ComparisonExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(erebusParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(erebusParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalEntityContext logicalEntity() {
			return GetRuleContext<LogicalEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicOpContext logicOp() {
			return GetRuleContext<LogicOpContext>(0);
		}
		public LogicalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterLogicalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitLogicalExpr(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExprContext logicalExpr() {
		return logicalExpr(0);
	}

	private LogicalExprContext logicalExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalExprContext _localctx = new LogicalExprContext(Context, _parentState);
		LogicalExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_logicalExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 113;
				Match(NOT);
				State = 114;
				logicalExpr(4);
				}
				break;
			case 2:
				{
				State = 115;
				comparisonExpr();
				}
				break;
			case 3:
				{
				State = 116;
				Match(LPAREN);
				State = 117;
				logicalExpr(0);
				State = 118;
				Match(RPAREN);
				}
				break;
			case 4:
				{
				State = 120;
				logicalEntity();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalExpr);
					State = 123;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 124;
					logicOp();
					State = 125;
					logicalExpr(6);
					}
					} 
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CmpOperandContext[] cmpOperand() {
			return GetRuleContexts<CmpOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOperandContext cmpOperand(int i) {
			return GetRuleContext<CmpOperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(erebusParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(erebusParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(erebusParser.RPAREN, 0); }
		public ComparisonExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterComparisonExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitComparisonExpr(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExprContext comparisonExpr() {
		ComparisonExprContext _localctx = new ComparisonExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_comparisonExpr);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				cmpOperand();
				State = 133;
				cmpOp();
				State = 134;
				cmpOperand();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				cmpOperand();
				State = 137;
				Match(CONTAINS);
				State = 138;
				Match(LPAREN);
				State = 139;
				cmpOperand();
				State = 140;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpExpressionContext opExpression() {
			return GetRuleContext<OpExpressionContext>(0);
		}
		public CmpOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterCmpOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitCmpOperand(this);
		}
	}

	[RuleVersion(0)]
	public CmpOperandContext cmpOperand() {
		CmpOperandContext _localctx = new CmpOperandContext(Context, State);
		EnterRule(_localctx, 22, RULE_cmpOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			opExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(erebusParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(erebusParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(erebusParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(erebusParser.STRING, 0); }
		public LogicalEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterLogicalEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitLogicalEntity(this);
		}
	}

	[RuleVersion(0)]
	public LogicalEntityContext logicalEntity() {
		LogicalEntityContext _localctx = new LogicalEntityContext(Context, State);
		EnterRule(_localctx, 24, RULE_logicalEntity);
		int _la;
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				Match(ID);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(erebusParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpExpressionContext[] opExpression() {
			return GetRuleContexts<OpExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpExpressionContext opExpression(int i) {
			return GetRuleContext<OpExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(erebusParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericTermContext numericTerm() {
			return GetRuleContext<NumericTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(erebusParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(erebusParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(erebusParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(erebusParser.MINUS, 0); }
		public OpExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterOpExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitOpExpression(this);
		}
	}

	[RuleVersion(0)]
	public OpExpressionContext opExpression() {
		return opExpression(0);
	}

	private OpExpressionContext opExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OpExpressionContext _localctx = new OpExpressionContext(Context, _parentState);
		OpExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_opExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				State = 152;
				Match(LPAREN);
				State = 153;
				opExpression(0);
				State = 154;
				Match(RPAREN);
				}
				break;
			case NUMBER:
			case ID:
				{
				State = 156;
				numericTerm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 173;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 171;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new OpExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_opExpression);
						State = 159;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 160;
						Match(MULT);
						State = 161;
						opExpression(7);
						}
						break;
					case 2:
						{
						_localctx = new OpExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_opExpression);
						State = 162;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 163;
						Match(DIV);
						State = 164;
						opExpression(6);
						}
						break;
					case 3:
						{
						_localctx = new OpExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_opExpression);
						State = 165;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 166;
						Match(PLUS);
						State = 167;
						opExpression(5);
						}
						break;
					case 4:
						{
						_localctx = new OpExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_opExpression);
						State = 168;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 169;
						Match(MINUS);
						State = 170;
						opExpression(4);
						}
						break;
					}
					} 
				}
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(erebusParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEQ() { return GetToken(erebusParser.GTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(erebusParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEQ() { return GetToken(erebusParser.LTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(erebusParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(erebusParser.NOTEQUAL, 0); }
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterCmpOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitCmpOp(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(Context, State);
		EnterRule(_localctx, 28, RULE_cmpOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << NOTEQUAL) | (1L << GT) | (1L << LT) | (1L << GTEQ) | (1L << LTEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(erebusParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(erebusParser.OR, 0); }
		public LogicOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterLogicOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitLogicOp(this);
		}
	}

	[RuleVersion(0)]
	public LogicOpContext logicOp() {
		LogicOpContext _localctx = new LogicOpContext(Context, State);
		EnterRule(_localctx, 30, RULE_logicOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(erebusParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(erebusParser.NUMBER, 0); }
		public NumericTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterNumericTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitNumericTerm(this);
		}
	}

	[RuleVersion(0)]
	public NumericTermContext numericTerm() {
		NumericTermContext _localctx = new NumericTermContext(Context, State);
		EnterRule(_localctx, 32, RULE_numericTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(erebusParser.ID, 0); }
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 34, RULE_funcname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(erebusParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(erebusParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(erebusParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_value);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				Match(NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186;
				Match(STRING);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 187;
				list();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 188;
				array();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(erebusParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(erebusParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(erebusParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ApiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_api; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterApi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitApi(this);
		}
	}

	[RuleVersion(0)]
	public ApiContext api() {
		ApiContext _localctx = new ApiContext(Context, State);
		EnterRule(_localctx, 38, RULE_api);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(ID);
			State = 192;
			Match(LPAREN);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACKET) | (1L << NUMBER) | (1L << ID) | (1L << STRING))) != 0)) {
				{
				State = 193;
				value();
				}
			}

			State = 196;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(erebusParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(erebusParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(erebusParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(erebusParser.RBRACKET, 0); }
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 40, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(LBRACKET);
			State = 199;
			Match(STRING);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 200;
				Match(T__1);
				State = 201;
				Match(STRING);
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 207;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(erebusParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(erebusParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(erebusParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(erebusParser.RBRACKET, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IerebusListener typedListener = listener as IerebusListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 42, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(LBRACKET);
			State = 210;
			Match(NUMBER);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 211;
				Match(T__1);
				State = 212;
				Match(NUMBER);
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 218;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return logicalExpr_sempred((LogicalExprContext)_localctx, predIndex);
		case 13: return opExpression_sempred((OpExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicalExpr_sempred(LogicalExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}
	private bool opExpression_sempred(OpExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,35,221,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,5,0,46,8,0,10,0,12,0,49,9,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
		2,5,2,61,8,2,10,2,12,2,64,9,2,3,2,66,8,2,1,2,1,2,1,2,5,2,71,8,2,10,2,12,
		2,74,9,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,82,8,3,1,4,1,4,3,4,86,8,4,1,4,1,4,
		1,4,1,5,1,5,1,5,1,5,1,5,3,5,96,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,122,8,
		9,1,9,1,9,1,9,1,9,5,9,128,8,9,10,9,12,9,131,9,9,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,3,10,143,8,10,1,11,1,11,1,12,1,12,1,12,3,12,
		150,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,158,8,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,172,8,13,10,13,12,13,175,
		9,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
		3,18,190,8,18,1,19,1,19,1,19,3,19,195,8,19,1,19,1,19,1,20,1,20,1,20,1,
		20,5,20,203,8,20,10,20,12,20,206,9,20,1,20,1,20,1,21,1,21,1,21,1,21,5,
		21,214,8,21,10,21,12,21,217,9,21,1,21,1,21,1,21,0,2,18,26,22,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,0,4,1,0,30,31,2,0,13,
		13,15,19,1,0,20,21,1,0,33,34,226,0,47,1,0,0,0,2,52,1,0,0,0,4,54,1,0,0,
		0,6,81,1,0,0,0,8,83,1,0,0,0,10,90,1,0,0,0,12,99,1,0,0,0,14,107,1,0,0,0,
		16,110,1,0,0,0,18,121,1,0,0,0,20,142,1,0,0,0,22,144,1,0,0,0,24,149,1,0,
		0,0,26,157,1,0,0,0,28,176,1,0,0,0,30,178,1,0,0,0,32,180,1,0,0,0,34,182,
		1,0,0,0,36,189,1,0,0,0,38,191,1,0,0,0,40,198,1,0,0,0,42,209,1,0,0,0,44,
		46,3,2,1,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,
		50,1,0,0,0,49,47,1,0,0,0,50,51,5,0,0,1,51,1,1,0,0,0,52,53,3,4,2,0,53,3,
		1,0,0,0,54,55,5,1,0,0,55,56,3,34,17,0,56,65,5,24,0,0,57,62,5,34,0,0,58,
		59,5,2,0,0,59,61,5,34,0,0,60,58,1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,
		63,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,65,57,1,0,0,0,65,66,1,0,0,0,66,
		67,1,0,0,0,67,68,5,25,0,0,68,72,5,28,0,0,69,71,3,6,3,0,70,69,1,0,0,0,71,
		74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,0,0,0,74,72,1,0,0,0,75,
		76,5,29,0,0,76,5,1,0,0,0,77,82,3,12,6,0,78,82,3,8,4,0,79,82,3,10,5,0,80,
		82,3,14,7,0,81,77,1,0,0,0,81,78,1,0,0,0,81,79,1,0,0,0,81,80,1,0,0,0,82,
		7,1,0,0,0,83,85,5,3,0,0,84,86,3,36,18,0,85,84,1,0,0,0,85,86,1,0,0,0,86,
		87,1,0,0,0,87,88,5,25,0,0,88,89,5,8,0,0,89,9,1,0,0,0,90,91,5,4,0,0,91,
		92,5,34,0,0,92,95,5,14,0,0,93,96,3,36,18,0,94,96,3,38,19,0,95,93,1,0,0,
		0,95,94,1,0,0,0,96,97,1,0,0,0,97,98,5,8,0,0,98,11,1,0,0,0,99,100,5,5,0,
		0,100,101,5,24,0,0,101,102,3,16,8,0,102,103,5,25,0,0,103,104,5,28,0,0,
		104,105,3,6,3,0,105,106,5,29,0,0,106,13,1,0,0,0,107,108,5,32,0,0,108,109,
		5,8,0,0,109,15,1,0,0,0,110,111,3,18,9,0,111,17,1,0,0,0,112,113,6,9,-1,
		0,113,114,5,22,0,0,114,122,3,18,9,4,115,122,3,20,10,0,116,117,5,24,0,0,
		117,118,3,18,9,0,118,119,5,25,0,0,119,122,1,0,0,0,120,122,3,24,12,0,121,
		112,1,0,0,0,121,115,1,0,0,0,121,116,1,0,0,0,121,120,1,0,0,0,122,129,1,
		0,0,0,123,124,10,5,0,0,124,125,3,30,15,0,125,126,3,18,9,6,126,128,1,0,
		0,0,127,123,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,
		19,1,0,0,0,131,129,1,0,0,0,132,133,3,22,11,0,133,134,3,28,14,0,134,135,
		3,22,11,0,135,143,1,0,0,0,136,137,3,22,11,0,137,138,5,23,0,0,138,139,5,
		24,0,0,139,140,3,22,11,0,140,141,5,25,0,0,141,143,1,0,0,0,142,132,1,0,
		0,0,142,136,1,0,0,0,143,21,1,0,0,0,144,145,3,26,13,0,145,23,1,0,0,0,146,
		150,7,0,0,0,147,150,5,34,0,0,148,150,5,35,0,0,149,146,1,0,0,0,149,147,
		1,0,0,0,149,148,1,0,0,0,150,25,1,0,0,0,151,152,6,13,-1,0,152,153,5,24,
		0,0,153,154,3,26,13,0,154,155,5,25,0,0,155,158,1,0,0,0,156,158,3,32,16,
		0,157,151,1,0,0,0,157,156,1,0,0,0,158,173,1,0,0,0,159,160,10,6,0,0,160,
		161,5,11,0,0,161,172,3,26,13,7,162,163,10,5,0,0,163,164,5,12,0,0,164,172,
		3,26,13,6,165,166,10,4,0,0,166,167,5,9,0,0,167,172,3,26,13,5,168,169,10,
		3,0,0,169,170,5,10,0,0,170,172,3,26,13,4,171,159,1,0,0,0,171,162,1,0,0,
		0,171,165,1,0,0,0,171,168,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,
		174,1,0,0,0,174,27,1,0,0,0,175,173,1,0,0,0,176,177,7,1,0,0,177,29,1,0,
		0,0,178,179,7,2,0,0,179,31,1,0,0,0,180,181,7,3,0,0,181,33,1,0,0,0,182,
		183,5,34,0,0,183,35,1,0,0,0,184,190,5,34,0,0,185,190,5,33,0,0,186,190,
		5,35,0,0,187,190,3,40,20,0,188,190,3,42,21,0,189,184,1,0,0,0,189,185,1,
		0,0,0,189,186,1,0,0,0,189,187,1,0,0,0,189,188,1,0,0,0,190,37,1,0,0,0,191,
		192,5,34,0,0,192,194,5,24,0,0,193,195,3,36,18,0,194,193,1,0,0,0,194,195,
		1,0,0,0,195,196,1,0,0,0,196,197,5,25,0,0,197,39,1,0,0,0,198,199,5,26,0,
		0,199,204,5,35,0,0,200,201,5,2,0,0,201,203,5,35,0,0,202,200,1,0,0,0,203,
		206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,
		0,0,0,207,208,5,27,0,0,208,41,1,0,0,0,209,210,5,26,0,0,210,215,5,33,0,
		0,211,212,5,2,0,0,212,214,5,33,0,0,213,211,1,0,0,0,214,217,1,0,0,0,215,
		213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,219,5,
		27,0,0,219,43,1,0,0,0,18,47,62,65,72,81,85,95,121,129,142,149,157,171,
		173,189,194,204,215
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
