//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Scripts/Grammar/erebus.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class erebusLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, WS=6, COMMENT=7, SEMI=8, PLUS=9, 
		MINUS=10, MULT=11, DIV=12, EQUAL=13, ASSIGN=14, NOTEQUAL=15, GT=16, LT=17, 
		GTEQ=18, LTEQ=19, AND=20, OR=21, NOT=22, CONTAINS=23, LPAREN=24, RPAREN=25, 
		LBRACKET=26, RBRACKET=27, BLOCK_OPEN=28, BLOCK_CLOSE=29, TRUE=30, FALSE=31, 
		POLICY=32, NUMBER=33, ID=34, STRING=35;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "WS", "COMMENT", "SEMI", "PLUS", 
		"MINUS", "MULT", "DIV", "EQUAL", "ASSIGN", "NOTEQUAL", "GT", "LT", "GTEQ", 
		"LTEQ", "AND", "OR", "NOT", "CONTAINS", "LPAREN", "RPAREN", "LBRACKET", 
		"RBRACKET", "BLOCK_OPEN", "BLOCK_CLOSE", "TRUE", "FALSE", "POLICY", "INT", 
		"NUMBER", "ID", "STRING"
	};


	public erebusLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public erebusLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'function'", "','", "'console.log('", "'let'", "'if'", null, null, 
		"';'", "'+'", "'-'", "'*'", "'/'", "'=='", "'='", "'!='", "'>'", "'<'", 
		"'>='", "'<='", "'&&'", "'||'", "'!'", null, "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "WS", "COMMENT", "SEMI", "PLUS", "MINUS", 
		"MULT", "DIV", "EQUAL", "ASSIGN", "NOTEQUAL", "GT", "LT", "GTEQ", "LTEQ", 
		"AND", "OR", "NOT", "CONTAINS", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
		"BLOCK_OPEN", "BLOCK_CLOSE", "TRUE", "FALSE", "POLICY", "NUMBER", "ID", 
		"STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "erebus.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static erebusLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,35,248,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,4,5,106,
		8,5,11,5,12,5,107,1,5,1,5,1,6,1,6,1,6,1,6,5,6,116,8,6,10,6,12,6,119,9,
		6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,
		13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,
		18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,3,22,183,8,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
		1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
		1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,217,8,31,1,
		32,4,32,220,8,32,11,32,12,32,221,1,33,1,33,1,33,4,33,227,8,33,11,33,12,
		33,228,3,33,231,8,33,1,34,1,34,5,34,235,8,34,10,34,12,34,238,9,34,1,35,
		1,35,5,35,242,8,35,10,35,12,35,245,9,35,1,35,1,35,0,0,36,1,1,3,2,5,3,7,
		4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
		17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
		29,59,30,61,31,63,32,65,0,67,33,69,34,71,35,1,0,6,3,0,9,10,13,13,32,32,
		2,0,10,10,13,13,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
		97,122,2,0,10,10,34,34,256,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
		0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
		19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
		0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
		0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,82,
		1,0,0,0,5,84,1,0,0,0,7,97,1,0,0,0,9,101,1,0,0,0,11,105,1,0,0,0,13,111,
		1,0,0,0,15,122,1,0,0,0,17,124,1,0,0,0,19,126,1,0,0,0,21,128,1,0,0,0,23,
		130,1,0,0,0,25,132,1,0,0,0,27,135,1,0,0,0,29,137,1,0,0,0,31,140,1,0,0,
		0,33,142,1,0,0,0,35,144,1,0,0,0,37,147,1,0,0,0,39,150,1,0,0,0,41,153,1,
		0,0,0,43,156,1,0,0,0,45,182,1,0,0,0,47,184,1,0,0,0,49,186,1,0,0,0,51,188,
		1,0,0,0,53,190,1,0,0,0,55,192,1,0,0,0,57,194,1,0,0,0,59,196,1,0,0,0,61,
		201,1,0,0,0,63,216,1,0,0,0,65,219,1,0,0,0,67,223,1,0,0,0,69,232,1,0,0,
		0,71,239,1,0,0,0,73,74,5,102,0,0,74,75,5,117,0,0,75,76,5,110,0,0,76,77,
		5,99,0,0,77,78,5,116,0,0,78,79,5,105,0,0,79,80,5,111,0,0,80,81,5,110,0,
		0,81,2,1,0,0,0,82,83,5,44,0,0,83,4,1,0,0,0,84,85,5,99,0,0,85,86,5,111,
		0,0,86,87,5,110,0,0,87,88,5,115,0,0,88,89,5,111,0,0,89,90,5,108,0,0,90,
		91,5,101,0,0,91,92,5,46,0,0,92,93,5,108,0,0,93,94,5,111,0,0,94,95,5,103,
		0,0,95,96,5,40,0,0,96,6,1,0,0,0,97,98,5,108,0,0,98,99,5,101,0,0,99,100,
		5,116,0,0,100,8,1,0,0,0,101,102,5,105,0,0,102,103,5,102,0,0,103,10,1,0,
		0,0,104,106,7,0,0,0,105,104,1,0,0,0,106,107,1,0,0,0,107,105,1,0,0,0,107,
		108,1,0,0,0,108,109,1,0,0,0,109,110,6,5,0,0,110,12,1,0,0,0,111,112,5,47,
		0,0,112,113,5,47,0,0,113,117,1,0,0,0,114,116,8,1,0,0,115,114,1,0,0,0,116,
		119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,120,1,0,0,0,119,117,1,
		0,0,0,120,121,6,6,0,0,121,14,1,0,0,0,122,123,5,59,0,0,123,16,1,0,0,0,124,
		125,5,43,0,0,125,18,1,0,0,0,126,127,5,45,0,0,127,20,1,0,0,0,128,129,5,
		42,0,0,129,22,1,0,0,0,130,131,5,47,0,0,131,24,1,0,0,0,132,133,5,61,0,0,
		133,134,5,61,0,0,134,26,1,0,0,0,135,136,5,61,0,0,136,28,1,0,0,0,137,138,
		5,33,0,0,138,139,5,61,0,0,139,30,1,0,0,0,140,141,5,62,0,0,141,32,1,0,0,
		0,142,143,5,60,0,0,143,34,1,0,0,0,144,145,5,62,0,0,145,146,5,61,0,0,146,
		36,1,0,0,0,147,148,5,60,0,0,148,149,5,61,0,0,149,38,1,0,0,0,150,151,5,
		38,0,0,151,152,5,38,0,0,152,40,1,0,0,0,153,154,5,124,0,0,154,155,5,124,
		0,0,155,42,1,0,0,0,156,157,5,33,0,0,157,44,1,0,0,0,158,159,5,46,0,0,159,
		160,5,105,0,0,160,161,5,110,0,0,161,162,5,99,0,0,162,163,5,108,0,0,163,
		164,5,117,0,0,164,165,5,100,0,0,165,166,5,101,0,0,166,183,5,115,0,0,167,
		168,5,46,0,0,168,169,5,109,0,0,169,170,5,97,0,0,170,171,5,116,0,0,171,
		172,5,99,0,0,172,173,5,104,0,0,173,174,5,101,0,0,174,183,5,115,0,0,175,
		176,5,46,0,0,176,177,5,119,0,0,177,178,5,105,0,0,178,179,5,116,0,0,179,
		180,5,104,0,0,180,181,5,105,0,0,181,183,5,110,0,0,182,158,1,0,0,0,182,
		167,1,0,0,0,182,175,1,0,0,0,183,46,1,0,0,0,184,185,5,40,0,0,185,48,1,0,
		0,0,186,187,5,41,0,0,187,50,1,0,0,0,188,189,5,91,0,0,189,52,1,0,0,0,190,
		191,5,93,0,0,191,54,1,0,0,0,192,193,5,123,0,0,193,56,1,0,0,0,194,195,5,
		125,0,0,195,58,1,0,0,0,196,197,5,116,0,0,197,198,5,114,0,0,198,199,5,117,
		0,0,199,200,5,101,0,0,200,60,1,0,0,0,201,202,5,102,0,0,202,203,5,97,0,
		0,203,204,5,108,0,0,204,205,5,115,0,0,205,206,5,101,0,0,206,62,1,0,0,0,
		207,208,5,65,0,0,208,209,5,108,0,0,209,210,5,108,0,0,210,211,5,111,0,0,
		211,217,5,119,0,0,212,213,5,68,0,0,213,214,5,101,0,0,214,215,5,110,0,0,
		215,217,5,121,0,0,216,207,1,0,0,0,216,212,1,0,0,0,217,64,1,0,0,0,218,220,
		7,2,0,0,219,218,1,0,0,0,220,221,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,
		0,222,66,1,0,0,0,223,230,3,65,32,0,224,226,5,46,0,0,225,227,3,65,32,0,
		226,225,1,0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,231,
		1,0,0,0,230,224,1,0,0,0,230,231,1,0,0,0,231,68,1,0,0,0,232,236,7,3,0,0,
		233,235,7,4,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,
		1,0,0,0,237,70,1,0,0,0,238,236,1,0,0,0,239,243,5,34,0,0,240,242,8,5,0,
		0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,
		246,1,0,0,0,245,243,1,0,0,0,246,247,5,34,0,0,247,72,1,0,0,0,10,0,107,117,
		182,216,221,228,230,236,243,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
